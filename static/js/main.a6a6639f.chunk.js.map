{"version":3,"sources":["App.tsx","index.tsx"],"names":["getRandomName","value","Date","now","toString","slice","App","useState","time","setTime","hasClock","setHasClock","document","addEventListener","event","preventDefault","useEffect","intervalId","setInterval","newTime","console","info","toUTCString","clearInterval","clockName","setClockName","timerId","window","newName","debug","className","ReactDOM","render","getElementById"],"mappings":"kKAGA,SAASA,IACP,IAAMC,EAAQC,KAAKC,MAAMC,WAAWC,OAAO,GAE3C,MAAM,SAAN,OAAgBJ,GAGX,IAAMK,EAAgB,WAC3B,MAAwBC,mBAAS,IAAIL,MAArC,mBAAOM,EAAP,KAAaC,EAAb,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEAC,SAASC,iBAAiB,eAAe,SAACC,GACxCA,EAAMC,iBAENJ,GAAY,MAGdC,SAASC,iBAAiB,SAAS,WACjCF,GAAY,MAGdK,qBAAU,WACR,IAAMC,EAAaC,aAAY,WAC7B,IAAMC,EAAU,IAAIjB,KAEhBiB,IAAYX,IACVE,GAEFU,QAAQC,KAAKb,EAAKc,cAAcjB,OAAO,IAAK,IAG9CI,EAAQU,MAET,KAEH,OAAO,WACLI,cAAcN,MAEf,CAACT,IAEJ,MAAkCD,mBAAS,WAA3C,mBAAOiB,EAAP,KAAkBC,EAAlB,KAkBA,OAhBAT,qBAAU,WACR,IAAMU,EAAUC,OAAOT,aAAY,WACjC,IAAMU,EAAU5B,IAEZ4B,IAAYJ,IACdC,EAAazB,KAEboB,QAAQS,MAAR,uBAA8BL,EAA9B,eAA8CI,OAE/C,MAEH,OAAO,WACLD,OAAOJ,cAAcG,MAEtB,CAACF,IAGF,sBAAKM,UAAU,MAAf,UACE,6CAECpB,GAEC,sBAAKoB,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,SACGN,IAGF,YAED,sBAAMM,UAAU,cAAhB,SACGtB,EAAKc,cAAcjB,OAAO,IAAK,YCvE5C0B,IAASC,OACP,cAAC,EAAD,IACApB,SAASqB,eAAe,U","file":"static/js/main.a6a6639f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.scss';\n\nfunction getRandomName(): string {\n  const value = Date.now().toString().slice(-4);\n\n  return `Clock-${value}`;\n}\n\nexport const App: React.FC = () => {\n  const [time, setTime] = useState(new Date());\n  const [hasClock, setHasClock] = useState(true);\n\n  document.addEventListener('contextmenu', (event: MouseEvent) => {\n    event.preventDefault();\n\n    setHasClock(false);\n  });\n\n  document.addEventListener('click', () => {\n    setHasClock(true);\n  });\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      const newTime = new Date();\n\n      if (newTime !== time) {\n        if (hasClock) {\n          // eslint-disable-next-line no-console\n          console.info(time.toUTCString().slice(-12, -4));\n        }\n\n        setTime(newTime);\n      }\n    }, 1000);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [time]);\n\n  const [clockName, setClockName] = useState('Clock-0');\n\n  useEffect(() => {\n    const timerId = window.setInterval(() => {\n      const newName = getRandomName();\n\n      if (newName !== clockName) {\n        setClockName(getRandomName());\n        // eslint-disable-next-line no-console\n        console.debug(`Renamed from ${clockName} to ${newName}`);\n      }\n    }, 3300);\n\n    return () => {\n      window.clearInterval(timerId);\n    };\n  }, [clockName]);\n\n  return (\n    <div className=\"App\">\n      <h1>React clock</h1>\n\n      {hasClock\n      && (\n        <div className=\"Clock\">\n          <strong className=\"Clock__name\">\n            {clockName}\n          </strong>\n\n          {' time is '}\n\n          <span className=\"Clock__time\">\n            {time.toUTCString().slice(-12, -4)}\n          </span>\n        </div>\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}